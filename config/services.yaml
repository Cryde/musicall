# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    file_publication_cover_destination: '%kernel.project_dir%/public/images/publication/cover'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\AuthenticationSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    Doctrine\Migrations\Version\DbalMigrationFactory: ~
    App\Migrations\Factory\MigrationFactoryDecorator:
        decorates: Doctrine\Migrations\Version\DbalMigrationFactory
        arguments: ['@App\Migrations\Factory\MigrationFactoryDecorator.inner', '@service_container']


    Mailjet\Client:
        arguments:
            $key: '%env(MAILER_KEY)%'
            $secret: '%env(MAILER_SECRET)%'
            $call: true
            $settings: { version: v3.1 }

    App\Service\Identifier\RequestIdentifier:
        arguments:
            $secret: '%env(IDENTIFIER_SECRET)%'

    App\Service\Mail\Contact\ContactMail:
        arguments:
            $email:  '%env(MAIL_CONTACT_EMAIL)%'

    App\Service\Mail\ArrayMailBuilder:
        arguments:
            $email: '%env(MAIL_NO_REPLY_EMAIL)%'
            $name: '%env(MAIL_NO_REPLY_NAME)%'
    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken']
